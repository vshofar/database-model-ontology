Prefix(:=<http://www.owl-ontologies.com/datamodel.owl#>)
Prefix(owl:=<http://www.w3.org/2002/07/owl#>)
Prefix(rdf:=<http://www.w3.org/1999/02/22-rdf-syntax-ns#>)
Prefix(xml:=<http://www.w3.org/XML/1998/namespace>)
Prefix(xsd:=<http://www.w3.org/2001/XMLSchema#>)
Prefix(rdfs:=<http://www.w3.org/2000/01/rdf-schema#>)


Ontology(<http://www.owl-ontologies.com/datamodel.owl>

Declaration(Class(:Attribute))
Declaration(Class(:AttributeType))
Declaration(Class(:ConceptualComponent))
Declaration(Class(:Entity))
Declaration(Class(:Relation))
Declaration(Class(:StrongEntity))
Declaration(Class(:WeakEntity))
Declaration(ObjectProperty(:hasAttribute))
Declaration(ObjectProperty(:hasAttributeType))
Declaration(ObjectProperty(:hasKey))
Declaration(ObjectProperty(:hasPartialKey))
Declaration(ObjectProperty(:isAttributeOf))
Declaration(ObjectProperty(:isKeyOf))
Declaration(ObjectProperty(:isPartialKeyOf))
Declaration(NamedIndividual(:address))
Declaration(NamedIndividual(:birthDate))
Declaration(NamedIndividual(:calculatedAttributeType))
Declaration(NamedIndividual(:composedAttributeType))
Declaration(NamedIndividual(:employee))
Declaration(NamedIndividual(:gender))
Declaration(NamedIndividual(:salary))
Declaration(NamedIndividual(:simpleAttributeType))
Declaration(NamedIndividual(:ssn))
############################
#   Object Properties
############################

# Object Property: :hasAttribute (:hasAttribute)

InverseObjectProperties(:hasAttribute :isAttributeOf)
ObjectPropertyDomain(:hasAttribute :Entity)
ObjectPropertyRange(:hasAttribute :Attribute)
DisjointObjectProperties(:hasAttribute :hasAttributeType)

# Object Property: :hasAttributeType (:hasAttributeType)

ObjectPropertyDomain(:hasAttributeType :Attribute)
ObjectPropertyRange(:hasAttributeType :AttributeType)

# Object Property: :hasKey (:hasKey)

SubObjectPropertyOf(:hasKey :hasAttribute)
InverseObjectProperties(:hasKey :isKeyOf)
ObjectPropertyDomain(:hasKey :Entity)
ObjectPropertyRange(:hasKey :Attribute)
DisjointObjectProperties(:hasKey :hasPartialKey)

# Object Property: :hasPartialKey (:hasPartialKey)

SubObjectPropertyOf(:hasPartialKey :hasAttribute)
InverseObjectProperties(:hasPartialKey :isPartialKeyOf)
ObjectPropertyDomain(:hasPartialKey :Entity)
ObjectPropertyRange(:hasPartialKey :Attribute)

# Object Property: :isAttributeOf (:isAttributeOf)

SubObjectPropertyOf(:isAttributeOf owl:topObjectProperty)

# Object Property: :isKeyOf (:isKeyOf)

SubObjectPropertyOf(:isKeyOf :isAttributeOf)

# Object Property: :isPartialKeyOf (:isPartialKeyOf)

SubObjectPropertyOf(:isPartialKeyOf :isAttributeOf)


############################
#   Classes
############################

# Class: :Attribute (:Attribute)

SubClassOf(:Attribute :ConceptualComponent)
SubClassOf(:Attribute ObjectExactCardinality(1 :hasAttributeType :AttributeType))

# Class: :AttributeType (:AttributeType)

EquivalentClasses(:AttributeType ObjectOneOf(:calculatedAttributeType :composedAttributeType :simpleAttributeType))
SubClassOf(:AttributeType :ConceptualComponent)
DisjointClasses(:AttributeType :Entity)

# Class: :Entity (:Entity)

SubClassOf(:Entity :ConceptualComponent)
SubClassOf(:Entity ObjectUnionOf(ObjectSomeValuesFrom(:hasKey :Attribute) ObjectSomeValuesFrom(:hasPartialKey :Attribute)))
SubClassOf(:Entity ObjectSomeValuesFrom(:hasAttribute :Attribute))

# Class: :Relation (:Relation)

SubClassOf(:Relation :ConceptualComponent)
SubClassOf(:Relation ObjectAllValuesFrom(:hasAttribute :Attribute))

# Class: :StrongEntity (:StrongEntity)

EquivalentClasses(:StrongEntity ObjectIntersectionOf(:Entity ObjectSomeValuesFrom(:hasKey :Attribute)))
DisjointClasses(:StrongEntity :WeakEntity)

# Class: :WeakEntity (:WeakEntity)

SubClassOf(:WeakEntity :Entity)
SubClassOf(:WeakEntity ObjectSomeValuesFrom(:hasPartialKey :Attribute))


############################
#   Named Individuals
############################

# Individual: :address (:address)

ObjectPropertyAssertion(:hasAttributeType :address :simpleAttributeType)

# Individual: :birthDate (:birthDate)

ObjectPropertyAssertion(:hasAttributeType :birthDate :simpleAttributeType)

# Individual: :calculatedAttributeType (:calculatedAttributeType)

ClassAssertion(:AttributeType :calculatedAttributeType)

# Individual: :composedAttributeType (:composedAttributeType)

ClassAssertion(:AttributeType :composedAttributeType)

# Individual: :employee (:employee)

ObjectPropertyAssertion(:hasAttribute :employee :address)
ObjectPropertyAssertion(:hasAttribute :employee :birthDate)
ObjectPropertyAssertion(:hasAttribute :employee :gender)
ObjectPropertyAssertion(:hasAttribute :employee :salary)
ObjectPropertyAssertion(:hasKey :employee :ssn)

# Individual: :gender (:gender)

ObjectPropertyAssertion(:hasAttributeType :gender :simpleAttributeType)

# Individual: :salary (:salary)

ObjectPropertyAssertion(:hasAttributeType :salary :simpleAttributeType)

# Individual: :simpleAttributeType (:simpleAttributeType)

ClassAssertion(:AttributeType :simpleAttributeType)


DisjointClasses(:Attribute :AttributeType :Entity :Relation)
)